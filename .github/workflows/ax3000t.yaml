name: Build Xiaomi AX3000T
on: 
  push:
    branches:
      - "dev"
      - "master"
  workflow_dispatch:

jobs:
    build:
        name: Prepare and build Xiaomi AX3000T
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: insert luci-rp-pppoe-relay
              run: |
                echo "src-git lienol https://github.com/Lienol/openwrt-package" >> feeds.conf.default
            
            - name: insert luci-app-xray 
              run: |
                echo "src-git-full luci_app_xray https://github.com/pangwa/luci-app-xray" >> feeds.conf.default

            - name: Update and install feeds
              run: |
                ./scripts/feeds update -a
                ./scripts/feeds install -a
            
            - name: Generate pppoe-relay config for Xiaomi AX3000T
              run: |
                echo "CONFIG_PACKAGE_rp-pppoe-common=y\n" > .config
                echo "CONFIG_PACKAGE_rp-pppoe-relay=y\n" >> .config
                echo "CONFIG_PACKAGE_rp-pppoe-server=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-compat=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-lua-runtime=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-pppoe-server=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-pppoe-relay=y\n" >> .config
                echo "CONFIG_LUCI_LANG_zh_Hans=y\n" >> .config

            - name: Generate openvpn config for Xiaomi AX3000T
              run: |
                echo "CONFIG_PACKAGE_kmod-tun=y\n" >> .config
                echo "CONFIG_PACKAGE_openvpn-openssl=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-openvpn=y\n" >> .config

            - name: Generate luci-app-xray  config for Xiaomi AX3000T
              run: |
                echo "CONFIG_PACKAGE_xray-core=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-xray=y\n" >> .config

            - name: Generate config for Xiaomi AX3000T
              run: |
                echo "CONFIG_TARGET_mediatek=y\n" >> .config
                echo "CONFIG_TARGET_mediatek_filogic=y\n" >> .config
                echo "CONFIG_TARGET_MULTI_PROFILE=y\n" >> .config
                echo "CONFIG_TARGET_PER_DEVICE_ROOTFS=y\n" >> .config
                echo "CONFIG_TARGET_DEVICE_mediatek_filogic_DEVICE_xiaomi_mi-router-ax3000t=y\n" >> .config
                echo "CONFIG_TARGET_DEVICE_mediatek_filogic_DEVICE_xiaomi_mi-router-ax3000t-ubootmod=y\n" >> .config
                echo "CONFIG_PACKAGE_wpad-basic-mbedtls=m\n" >> .config
                echo "CONFIG_PACKAGE_libwolfsslcpu-crypto=y\n" >> .config
                echo "CONFIG_PACKAGE_wpad-wolfssl=y\n" >> .config
                echo "CONFIG_PACKAGE_dnsmasq=m\n" >> .config
                echo "CONFIG_PACKAGE_dnsmasq-full=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-nf-nathelper=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-nf-nathelper-extra=y\n" >> .config
                echo "CONFIG_PACKAGE_luci=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-proto-wireguard=y\n" >> .config
                echo "CONFIG_PACKAGE_xl2tpd=y\n" >> .config

                make defconfig

            - name: Download package sources
              run: make download V=s

            - name: Build tools
              run: |
                make tools/install -j$(nproc) V=s || \
                make tools/install V=s

            - name: Build toolchain
              run: |
                make toolchain/install -j$(nproc) V=s || \
                make toolchain/install V=s

            - name: Build target images
              run: |
                make -j$(nproc) V=s || \
                make V=s

            - name: TAR output
              run: tar -cvf filogicx-images.tar bin/targets/mediatek/filogic/

            - name: Upload artifacts
              uses: actions/upload-artifact@v3
              with:
                name: filogic-images
                path: filogicx-images.tar

    release:
          name: Make a release
          runs-on: ubuntu-latest
          needs: build

          steps:
            - name: Download the image artifacts
              uses: actions/download-artifact@v3
              with:
                name: filogic-images

            - name: Extract the image artifacts
              run: tar xf filogicx-images.tar

            - name: Get the current date
              run: echo "NOW=$(date +%F)" >> $GITHUB_ENV

            - name: Create a release
              uses: "marvinpinto/action-automatic-releases@latest"
              with:
                repo_token: "${{ secrets.GITHUB_TOKEN }}"
                prerelease: true
                title: "Xiaomi AX3000T ${{ env.NOW }}"
                automatic_release_tag: "filogic-${{ env.NOW }}"
                auto_generate_release_notes: true
                files: bin/targets/mediatek/filogic/*